#include <jsoncpp/json/json.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/protocol/TCompactProtocol.h>
#include "gen-cpp/message_types.h"  // This is the file generated by the Thrift compiler
#include <iostream>
#include <array>
#include <sstream>

struct MyMessage {
  ::MessageType::type type;  // Use the MessageType enum from the Thrift-generated code
  std::array<char, 56> parity;
  std::string payload;
};


std::string serializeJson(const MyMessage& message) {
  Json::Value root;
  root["type"] = static_cast<int>(message.type);
  root["parity"] = std::string(message.parity.begin(), message.parity.end());
  root["payload"] = message.payload;
  Json::StreamWriterBuilder writer;
  return Json::writeString(writer, root);
}

MyMessage deserializeJson(const std::string& s) {
  Json::CharReaderBuilder builder;
  Json::Value root;
  std::istringstream iss(s);
  std::string errs;
  Json::parseFromStream(builder, iss, &root, &errs);
  ::MessageType::type type = static_cast<::MessageType::type>(root["type"].asInt());
  std::array<char, 56> parity;
  std::copy(root["parity"].asString().begin(), root["parity"].asString().end(), parity.begin());
  std::string payload = root["payload"].asString();
  return {type, parity, payload};
}

std::string serializeThrift(const MyMessage& message) {
  // Convert the message to a Thrift struct
  ::Message thriftMessage;
  thriftMessage.type = message.type;
  thriftMessage.parity = std::string(message.parity.begin(), message.parity.end());
  thriftMessage.payload = message.payload;

  // Serialize the Thrift struct to a string
  auto buffer = std::make_shared<apache::thrift::transport::TMemoryBuffer>();
  apache::thrift::protocol::TCompactProtocol protocol(buffer);
  thriftMessage.write(&protocol);
  return buffer->getBufferAsString();
}

MyMessage deserializeThrift(const std::string& s) {
  // Deserialize the string to a Thrift struct
  ::Message thriftMessage;
  auto buffer = std::make_shared<apache::thrift::transport::TMemoryBuffer>((uint8_t*)s.data(), s.size());
  apache::thrift::protocol::TCompactProtocol protocol(buffer);
  thriftMessage.read(&protocol);

  // Convert the Thrift struct to a Message
  ::MessageType::type type = thriftMessage.type;
  std::array<char, 56> parity;
  std::copy(thriftMessage.parity.begin(),thriftMessage.parity.end(), parity.begin());
  std::string payload = thriftMessage.payload;
  return {type, parity, payload};
}

int main() {
  MyMessage message = {::MessageType::COMMAND, {}, "test"};
  std::string json = serializeJson(message);
  std::cout << "JSON size: " << json.size() << '\n' << json << '\n';

  std::string thrift = serializeThrift(message);
  std::cout << "Thrift size: " << thrift.size() << '\n' << thrift << '\n';

  return 0;
}
